<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Video Call App</title>
  <link rel="stylesheet" href="styles.css">
  <script>
    const ROOM_ID = "<%= roomId %>"
  </script>
  <title>Document</title>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }
    
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <div id="video-grid"></div>
  <button id="mute-button">Mute</button>
  <button id="stop-video-button">Stop Video</button>
  <script>
    const videoGrid = document.getElementById('video-grid')
    const myVideo = document.createElement('video')
    myVideo.muted = true

    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then(stream => {
      addVideoStream(myVideo, stream)

      socket.emit('join-room', ROOM_ID)

      socket.on('user-connected', userId => {
        connectToNewUser(userId, stream)
      })
    })

    function addVideoStream(video, stream) {
      video.srcObject = stream
      video.addEventListener('loadedmetadata', () => {
        video.play()
      })
      videoGrid.append(video)
    }

    function connectToNewUser(userId, stream) {
      const call = myPeer.call(userId, stream)
      const video = document.createElement('video')
      call.on('stream', userVideoStream => {
        addVideoStream(video, userVideoStream)
      })
      call.on('close', () => {
        video.remove()
      })
    }

    const peer = new Peer(undefined, {
      path: '/peerjs',
      host: '/',
      port: '443'
    })

    peer.on('open', id => {
      socket.emit('join-room', ROOM_ID, id)
    })

    socket.on('user-connected', userId => {
      console.log('User connected: ' + userId)
    })

    socket.on('user-disconnected', userId => {
      console.log('User disconnected: ' + userId)
    })

    peer.on('call', call => {
      navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
      }).then(stream => {
        call.answer(stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream => {
          addVideoStream(video, userVideoStream)
        })
      })
    })

    document.getElementById('mute-button').addEventListener('click', () => {
      const enabled = myVideo.srcObject.getAudioTracks()[0].enabled
      myVideo.srcObject.getAudioTracks()[0].enabled = !enabled
    })

    document.getElementById('stop-video-button').addEventListener('click', () => {
      const enabled = myVideo.srcObject.getVideoTracks()[0].enabled
      myVideo.srcObject.getVideoTracks()[0].enabled = !enabled
    })
  </script>
</body>
</html>